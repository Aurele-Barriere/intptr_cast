* DONE [INTPTR] meeting about the paper (14h)
  SCHEDULED: <2017-05-17 Wed>
* DONE [INTPTR] meeting 11h
  SCHEDULED: <2017-05-18 Thu>
* DONE [INTPTR][memupdate] semantics update on memory
  DEADLINE: <2017-06-05 Mon>
  in [[/home/aurele/intptrcast/CompCert-intptr/common/Memory.v][Memory.v]]
** DONE [INTPTR][memupdate] add p:option Z
   called mem_concrete inside the memory

   Remaining question:
   Should a call of free set the option back to None or leave it unchanged?
   It depends on the semantics we want to give to the casting of a freed pointer.
    -> the current decision is to leave it unchanged
   
** DONE [INTPTR][memupdate][consistency] add consistency

   added as a Definition: mem -> Prop

*** DONE [INTPTR][memupdate][consistency] No overlap

    I've implemented the simple version of overlap (we don't look inside the blocks the free addresses)

    To define this we need the size of each block.
    This has been added inside the memory as a field mem_block_size : block -> Z.

    
    Two questions on the size field:
    
        What should be the initial value of the size? on an empty memory. -> doesn't really matter
    
	When freeing, should we put it back to 0? -> NO

*** DONE [INTPTR][memupdate][consistency] Next block logicals
    
    This says that every block after nextblock is a logical block.
    Because we never want to capture a block that hasn't been allocated.
    This is need to prove memory_consistency, so it has been added here.

*** DONE [INTPTR][memupdate][consistency] First and last address
    
    For now, we only have a property that says that there is no concrete block
    with concrete address 0.
    How to deal with last address? At this point, the memory is infinite. 

    Should it be done in a later pass of CompCert? Or right now because we are dealing with real addresses?
    
*** DONE [INTPTR][memupdate][consistency] contained in memory

    We want to say that no block overflows the memory, i.e
    forall b, address(b)+size(b) < max_memory.
    Here again, we need the size of the memory.

    Both of these properties using the max size make memory_consistency preservation hard to prove.
    
** DONE [INTPTR][memupdate] Proof of memory consistency

   I have proved that empty is a consistent memory.

   And for every operation in {store,storebytes,alloc,free,perm_drop,capture},
   I have proved memory_consistency preservation.

** DONE [INTPTR][memupdate] add realize/capture as a fifth operation

   Capture should now be an operation, just like store,alloc,...
   This has been implemented with a predicate rather than a function,
   Because the address given to a block while capturing is undeterministic.
   
   Questions:

       When trying to capture an already concrete block, is this a capture? -> Yes, this sould be allowed
       Maybe sometimes, we'll have to successives capture of the same pointer.

       One of the hypothesis of the predicate is the memory_consistency preservation. Is that right?

** DONE [INTPTR][memupdate] add properties of capture

   Each operation has a lot of theorems. Some might be useful later.
   What should we prove for the capture ?
   DONE : memory_consistency preservation

   We'll see later.

** DONE [INTPTR][memupdate] add valid pointer
   
   See page 6, section 4 of the paper.

** DONE [INTPTR][memupdate] remove mem_valid
** DONE [INTPTR][memupdate] rewrite valid_pointer
** DONE [INTPTR][memupdate] remove size, remember low and high offsets
   implemented with a field 
   mem_offset_bounds
   block -> Z*Z
** DONE [INTPTR][memupdate] rewrite overlap
** DONE [INTPTR][memupdate] rewrite consistency proofs
   
   Need proofs for alloc
   
   And issue:
   I have zle lo addr, I want to prove lo<=addr.
   However, zle is {x<=y}+{y>x}. -> DONE
   
** DONE [INTPTR][memupdate] rewrite normalize and denormalize

   With the new block representation (p,lo,hi)

** DONE [INTPTR][memupdate] add memory parameter
   I use [if Archi.ptr64 then int64 else int].
   Is it ok?
   It seems that [Archi.ptr64] is set to false, will it be changed when compiling for x64?

   Representing the addresses:
   Either we use the types int and int64, and then for each operation,
   we must prove they are in the right range.
   Issues arise because we often add an address and something else (for instance, low offset bound)

   Or we use type Z, and then we add a memory consistency invariant,
   that says that every concrete address is in the right range.
   But then we must cast the address from Z to int. Is it ok?

** DONE [INTPTR][memupdate] finish consistency proofs
** DONE [INTPTR][memupdate][review] pull request
*** DONE [INTPTR][memupdate][review] put consistency inside of mem'
*** DONE [INTPTR][memupdate][review] do every obligation
*** DONE [INTPTR][memupdate][review] memory size?
    
    changed it to max_address for now
    the issue of real memory size should be addressed later
*** DONE [INTPTR][memupdate][review] no let
*** DONE [INTPTR][memupdate][review] inductive addr_in_concrete_block. inductive consistency
*** DONE [INTPTR][memupdate][review] name hypothesis in weaker_access
*** DONE [INTPTR][memupdate][review] remove comment in empty
*** DONE [INTPTR][memupdate][review] change exists_at_most_one_block
*** DONE [INTPTR][memupdate][review] spaces
*** DONE [INTPTR][memupdate][review] HRANGE instead of HLOW HHIGH
*** DONE [INTPTR][memupdate][review] remove exists_at_most_one_block
*** DONE [INTPTR][memupdate][review] addresses_in_range should rely on hi lo rather than address_in_block
    We'll do it later, if we change our minds regarding the way permissions are given

*** DONE [INTPTR][memupdate][review] rename weaker_access (access_le?)
*** DONE [INTPTR][memupdate][review] concrete_nextblock needs to be changed
*** DONE [INTPTR][memupdate][review] double capture
*** DONE [INTPTR][memupdate][review] return offset in addr_in_concrete_block
*** DONE [INTPTR][memupdate][review] predicate for addr in [p+lo, p+hi[
*** DONE [INTPTR][memupdate][review] rename m_access
*** DONE [INTPTR][memupdate][review] use uniqueness for exists_at_most_one
*** DONE [INTPTR][memupdate][review] change addr_in_block for a pair
*** DONE [INTPTR][memupdate][review] define range
** DONE [INTPTR][memupdate] rewrite with better coq style (no arrows)
   
   omit forall
   name hypothesis
   name goal with << >>
   props in caps
   a.(x)
   exploit

   using Sflib library

** DONE [INTPTR][memupdate] use Nonempty instead of Readable
* DONE [INTPTR][meminj] Memory Injection
** DONE [INTPTR][meminj] change memory extension

   We need to add something about mem_concrete in extension.
   Because if we don't, I don't think we can prove the memory injection preservation.
   
   For now, equality of the fields mem_concrete.


   Then, we need to change magree in Deadcodeproof.v

** DONE [INTPTR][meminj] change unchanged_on
   
   We need to add mem_concrete preservation, for the proof in Separation.v.
 
   If there is any address in a block such that P b ofs, then concrete#b must be preserved?

   Is it different for logical and concrete blocks?
   For logical blocks, any ofs such that P b ofs means concrete preservation.
   For concrete blocks, the offset must be correponding to a real, used address of this block (see permissions)
   
   But anyway, this will be used for loc_unmapped, which does not depend on the offset.

   There is a problem in minjection (in Separation.v).
   The image is restricted to the map of blocks that have a permission.
   Why?

** DONE [INTPTR][meminj] freed or non-declared distinction
   Change the distinction between usable and not usable addresses that is made using permission.
   Because it does not distinguish addresses that have never been allocated, and those that have been freed.
   I think we should make the difference, because using a freed pointer has real use cases.
   I think that this difference can be found by looking at the offset_bounds field that we added.

   Then, in the definition of mi_source_concrete, we would state mem_concrete preservation only 
   for the addresses in the right range.
   And in the minjection, the image of an injection should use th same definition.
   Then minjection obligation should be provable, and other results should be too.
   Those proofs are alloc_parallel_rule and exteral_call_parrallel_rule.

   Stackingproof.v should not have any problem, because it hadn't when the definition of minjection was larger.
*** DONE [INTPTR][meminj][free] Summary of discussion
*** DONE [INTPTR][meminj][free] Read Separation.v with more on Separation logic
    try to see if the choice to enlarge the image to freed addresses is sound
*** DONE [INTPTR][meminj][free] Add offset_bounds preservation to unchanged_on
    I'm not sure.
*** DONE [INTPTR][meminj][free] Add memory consistency
    Mem.perm m0 b1 ofs k p -> in_range ofs (m0.offset_bounds#b1)
    With this, we will be able to prove the obligation with the new definition.

*** DONE [INTPTR][meminj][free] Replace the definition of minjection
    Try to do it without changing mi_source_concrete at first.
    We should replace the perm m1... with in_range ofs m1 lo hi...

    Then we'll see if it is needed.
    If it is, it should look like:
    (PERM: exists ofs, perm m1 b1 ofs Max Nonempty)

    I think it is not needed if we can prove that no block is allocated with size 0.
    Maybe this can be added as an hypothesis to mi_source_concrete
    (SIZE: snd(offset_bounds b) - fst(offset_bounds b) > 0)
    
    Then we can map a concrete, 0 block to a logical one.
    Is this an issue?

    It has ben changed, now doing the proofs.

*** DONE [INTPTR][meminj][free] Change extcall_properties
    Add one property saying that external calls cannot decrease the bounds.
    This is not needed for now.

*** DONE [INTPTR][meminj][free] Handle the case of empty blocks
    Either by adding an hypothesis in inject, or by changing unchanged_on, I think.
    This is why the obligation in Sepration.v is Admitted, I cannot find one 'good' address.
    This has been handled with the new unchanged_on predicate, with concrete blocks preservation.

** DONE [INTPTR][meminj] change public memory injection
   
   Separation between public and private memory?
   Private when exclusively owned by the current function.
   In Memory model, v2, they say that unused local variables are "pulled out of memory".
   Everything under memory injection is public.
   The rest is private.
   Look at ec_mem_inject to see how it is dealt with.
   what about integer overflow? and mi_representable?
   in inject, I think we can add every constraint we want on PUBLIC memory.
*** DONE [INTPTR][meminj] No source concrete and target logical in public
    I think it should be in either mem_inj or inject.
    Which one? It depends if we want the property to also hold for memory extension.


    mi_source_concrete
      b1 b2 delta addr
      (INJECT: f b1 = Some(b2, delta))
      (CONCRETE: m1.(mem_concrete)#b1 = Some addr):
      m2.(mem_concrete)#b2 = Some (addr+delta);

      addr+delta to be able to access b1 and b2 with the same indexes. 
*** DONE [INTPTR][meminj][proofs] prove the new injection
**** DONE [INTPTR][meminj][proofs] Memory.v
     the two last proofs require a better version of extends
     extends must preserve the field mem_concrete, I think.
**** DONE [INTPTR][meminj][proofs] Separation.v
     We just need to change the unchanged_on definition to add that mem_concrete is preserved.
     Then the proof will be ok.
**** DONE [INTPTR][meminj][proofs] ValueDomain.v
**** DONE [INTPTR][meminj][proofs] Unusedglobproof.v
     I don't know how to do that.
*** DONE [INTPTR][meminj] Concrete addresses equality?
    The paper says that they must coincide.
    Isn't equality too strong? I'm not sure.

    I added concrete address equality (with an offset)
** DONE [INTPTR][meminj] prove memory injection preserved with capture
** DONE [INTPTR][meminj] No source concrete in private memory
*** DONE [INTPTR][meminj] change inject'

    The blocks that are mapped to None with the mem injection.
    We must say that if a block is mapped to None, then it is logical.
    This should be added in inject'.
    
*** DONE [INTPTR][meminj] proofs
**** DONE [INTPTR][meminj][proofs] Memory.v
**** DONE [INTPTR][meminj][proofs] Separation.v
**** DONE [INTPTR][meminj][proofs] ValueDomain.v
***** DONE [INTPTR][meminj][proofs][abstract] Change stack_soundness
      add that the stack should be logical for private calls
      No, just mmatch and bc sp = BCinvalid should be enough
***** DONE [INTPTR][meminj][proofs][abstract] Add abstract concrete in amem
      with an abstract boolean?
      only one, for the stack frame
***** DONE [INTPTR][meminj][proofs][abstract] Change analyze_call
      if the stack might be concrete, then we should be doing public call
***** DONE [INTPTR][meminj][proofs][abstract] Add property invalid_logical bc m
      This should be added inside mmatch
***** DONE [INTPTR][meminj][proofs][abstract] Show preservation of invalid_logical
***** DONE [INTPTR][meminj][proofs][abstract] Prove external_call_match
***** DONE [INTPTR][meminj][proofs][abstract] Show that the boolean is a sound abstraction
      I don't know how to do that without initializing with true everywhere.
      where is amem initialization really done?
      try to change the definition of mfunction_entry, and others.
**** DONE [INTPTR][meminj][proofs] Unusedglobproof.v
** DONE [INTPTR][meminj] pull request
*** DONE [INTPTR][meminj][PR] remove perm_range
*** DONE [INTPTR][meminj][PR] inductive captured
    removed
*** DONE [INTPTR][meminj][PR] double match on is_captured
    removed
*** DONE [INTPTR][meminj][PR] replace captured_iff_is_captured
    removed
*** DONE [INTPTR][meminj][PR] change name of source_concrete, source_private
    the second should say logical.
    Maybe public_concrete and private_source_logical?
    keep the same name now, just put src instead of source
*** DONE [INTPTR][meminj][PR] revert instead of generalize dependent
*** DONE [INTPTR][meminj][PR] don't instantiate variables
* DONE [INTPTR] Freeing: on blocks or addresses?
  
  See the issue on Github.
  For now, I added a field mem_valid: block -> bool.
  But I haven't changed the freeing function or anything.
  -> We can free addresses, with permission set to None.
  Then overlapping has to be defined on addresses: 
    foreach address, there is not more than one concrete block in which the address is Freeable.
    
* DONE [INTPTR] Check if there are any cases of alloc with lo!=0
  yes, in cfrontend/Cexec.v
  Mem.alloc m (- size_chunk Mptr) (Ptrofs.unsigned sz) in
* DONE [INTPTR] Fatal error: out of memory on common/Separation.v
  firstorder auto fails.
  do the proofs in the older version, and see what auto does,
  then inline the proofs in the new version?
  
  info_auto with *.
  info ...
  Show Proof.
  Print thm.
 
* TODO [INTPTR][sem] Capture semantics
** DONE [INTPTR][sem] Determinism of capture?
   This should remain non-deterministic.
   Then we will not have all the deterministic theorems.
   -> Mixed Bisimulations.

** TODO [INTPTR][sem] implement extcall_capture_sem
*** DONE [INTPTR][sem] what should be the return value of a capture?
    Vundef, like free, I think
*** TODO [INTPTR][sem] rewrite extcall_properties
    Rewrite them for backward simulation.
*** TODO [INTPTR][sem] prove extcall_capture_ok
**** TODO [INTPTR][sem][extcall_properties] ec_mem_inject
     This predicate should be changed using mixed simulations
**** TODO [INTPTR][sem][extcall_properties] ec_mem_extends
     Same thing.
     I don't think this one is true right now. We don't know if there exists a memory 
     such that it is the result of the capture.
     Since the extended memory can be bigger, maybe it can take all of the concrete memory?
     And then we can't capture the block.
** TODO [INTPTR][sem] add normalization of pointer (cast2int) and denormalization (cast2ptr)
   see page 6, section 4 of the paper.
   The denormalize is a predicate, not a function.
** TODO [INTPTR][sem] add cast semantics
** TODO [INTPTR][sem] what should be the rule for pointer equality?
   see [4/15] of cerberus. what if different type ([6/15]) ? pointer comparison ([7/15]) ?
   should we just cast to int before.
* TODO [INTPTR][mixedsim] Mixed Simulations
** DONE [INTPTR][mixedsim] understand the proof of mixed sim -> backwards sim
   each time we use forward reasonning, we have 
   local determinate_at and local receptive_at
** DONE [INTPTR][mixedsim] understand the atomic of a semantics
   Basically cutting steps with big traces into smaller steps
   Why do we keep the same order? shouldn't we consider the length of the trace to unload?
   when the target stutters (each time there have been new states in the target)
** DONE [INTPTR][mixedsim] understand the strongly receptive notion
** DONE [INTPTR][mixedsim] understand the order in the factor proof
   Because L2 is sinle events. Then there already exists intermediate steps that corresponds to
   the intermediate steps of (atomic L1).
   
   I think we could have a more generalized theorem without single events for L2?
   And with a smaller definition of ffs_match, here it is bigger than needed, because 
   intermediate atomic states will match any intermediate state of L2.
** DONE [INTPTR][mixedsim] check if the suggested plan seems ok
   maybe use factor_backward instead of behavior inclusion
   we would need receptivity and well_behaved traces for each language (only for Cstrategy right now)
   strong_receptivity everywhere should be good
** DONE [INTPTR][mixedsim] understand the proof with atomic
** DONE [INTPTR][mixedsim] understand the changes when switching forward to mixed
   we had the proof forward -> backward
   then jeehoon wrote the proof mixed -> backward
   it's very similar, and the changes should look like what we'll use in the next proof 
** DONE [INTPTR][mixedsim] strongly_receptive_at ?
   weaker theorem.
** DONE [INTPTR][mixedsim] change mixed simultaion
   The receptivity predicate must be given as a parameter.
   Then we will have two kinds of mixed simulations: with receptive_at, and with strongly_receptive_at
   Then we need to prove that mixed(strong_r) A B -> mixed(r) A B.
   And we keep the proof that mixed(r) A B -> backward A B.
** DONE [INTPTR][mixedsim] new proof for mixed simulation
   mixed_SR A B -> mixed_R (atomic A) B
   it should look like the proof of factor_forward
   It seems that single_events is true after CStrategy, so we can require it.

   I need determinacy when emptying buffer -> it's ok.
** DONE [INTPTR][mixedsim] every intermediate language is well_behaved_traces
   It should be true because it is for Cstrategy
** DONE [INTPTR][mixedsim] every intermediate language is single_events
   after CStrategy
** TODO [INTPTR][mixedsim] add the same proofs for arm and powerpc Asm
   I can't compile it right now. It should be the same proof than for x86
   there should be well_behaved_traces and sinle_events as well
** TODO [INTPTR][mixedsim] prove each mixed simulation
   with strongly_receptive_at
** DONE [INTPTR][mixedsim] finish the correctness proof
** DONE [INTPTR][mixedsim] fix the proof of transf_cstrategy_program_preservation
   in driver/Complements.v
   we should maybe just remove it
   write about it on Github
* TODO [INTPTR] null pointer
  Add it (page 6).
  Raises undef when storing or loading null pointer.

  Should we add it as a block and change the definitions of the operations?
   
* TODO [INTPTR] Definition of max_address
  This might just be Ptrofs.max_unsigned   
  
* TODO [INTPTR][report] Report
  DEADLINE: <2017-08-04 Fri>
  Outline:
** TODO Introduction
   Introduction, context and motivation should be one third of the paper...
*** DONE C semantics
*** TODO Coq
*** DONE CompCert
** DONE Preliminaries
*** DONE Logical model
*** DONE Concrete model
*** DONE Quasi-concrete model
    be clear with the assumptions for optimizations
** DONE Related Works
   UB can have a negative effect [ub_bugs] when optimizing
   First approach: identify code whose optim depends on UB [ub_impact] against "optimization-unstable code"

   Second approach: extend semantics expressiveness by ruling out UBs.   
   Low-level memory model [low_level]. Or [c_hol]..
   New abstract memory model with symbolic values [wilke], for the same issues.
   However, some cases won't be given semantics with this solution (determinism).

   Finally, the model seems to be compatible with other works, with some adaptation.
   [6][7]Krebber

** TODO Contribution
*** DONE memory update
    1) adding fields
       mem_concrete, mem_offset_bounds

       mem_offset_bounds instead of size because allocation does not start at 0.
       memory overhead?

       no validity flag: use of permissions instead.
       In CompCert, more precise : free addresses and not whole blocks.
       See for instance the free, alloc etc...
       We wanted to keep this in case it is useful.
       
       This will change memory consistency.
    2) Write a formalized change (like in section 2), then show how it was implemented
    3) adding memory consistency
       nextblocks_logical: just a side-effect of how the memory is defined in CompCert,
         it is not a list but a map on Z
       addresses_in_range:
         not a lot of changes. remember that only the addresses (with offset) are important,
	 the address of the block itself does not matter.
       no_concrete_overlap:
	 once again, just look at the addresses. only one non-free address at one given concrete address
    4) show the implem (or link to it in Annex)
    5) proofs of consistency
    6) freeing concrete blocks?
       maybe we need to discuss this a little more
       Right now, the concrete field isn't changed, meaning that you can use the address of a freed variable?
       I'm not sure

       It should not be allowed to use the address of a concrete block, because maybe something was defined at the same place
       Then an external call could guess the address of this new thing.
*** TODO memory injection
    1) remind memory injection
       injection is what defines public and private memory in CompCert
       injection is what links memory before and after optimization
    2) memory injection in the quasi concrete model
       compcert tso : out of memory is no behavior (section 2.3)
       if more concrete blocks in the source: source can succeed but target fail
       explain why the source should not have more concrete blocks than the target
    3) what needs to be changed
       src_concrete
       src_private
       unchanged_on -> perhaps this should go in the memupdate part?
    4) proofs of injection
       initial memory for a program, etc...
    5) abstract analysis
       why do we need to analyze the private calls
       how do we change the abstract memory
       how do we change the analysis

    see what is written in concrete_compcert.pdf, section 5.
*** TODO mixed simulations
    1) simulations
       bisimulations, forward, backward
    2) the proof of correctness in CompCert
    3) Non-determinism
    4) Mixed simulations and properties
    5) The new proof of correctness
*** TODO semantics
** TODO Evaluation?
   Anything admitted? 
   Maybe test the changes made to abstract analysis to see if we don't loose too much private calls
   See what optimizations are successful

   [13][2] of symbolic values are said to bebenchmarks with low-level pointer arithmetics
** TODO Conclusion
** TODO Annex
   Examples of optimizations? 
   With and without pointers (see [Kang et al] for examples in the quasi concrete model)
** TODO Add limits of quasi-concrete
   see section 3.7
   this could be added into the preliminaries
** TODO Add the state of int-ptr cast in CompCert
   see section 2.2
   this could be added to preliminaries or introduction
* TODO [INTPTR][pres] Presentation
  DEADLINE: <2017-08-04 Fri>
** TODO [INTPTR][pres] Presentations at the ENS
   SCHEDULED: <2017-08-31 Thu>
** TODO [INTPTR][pres] Presentations at the ENS
   SCHEDULED: <2017-09-05 Tue>
** TODO [INTPTR][pres] Presentations at the ENS
   SCHEDULED: <2017-09-06 Wed>
* DONE [INTPTR] Abstract
  DEADLINE: <2017-06-30 Fri>
